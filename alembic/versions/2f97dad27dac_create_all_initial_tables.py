"""create all initial tables

Revision ID: 2f97dad27dac
Revises: 
Create Date: 2022-02-10 07:44:01.632592

"""
import os
import json

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "2f97dad27dac"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "animals",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("species", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "guests",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "paint_colors",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("hex", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "quotes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    seasons = op.create_table(
        "seasons",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("number"),
    )
    with open(
        os.path.join(os.path.dirname(__file__), "../data/seasons.json")
    ) as f:
        season_data = f.read()

    op.bulk_insert(seasons, json.loads(season_data))

    episodes = op.create_table(
        "episodes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("season_id", sa.Integer(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Unicode(), nullable=True),
        sa.Column("youtube_url", sa.String(), nullable=True),
        sa.Column("date", sa.String(length=25), nullable=False),
        sa.ForeignKeyConstraint(
            ["season_id"],
            ["seasons.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with open(
        os.path.join(os.path.dirname(__file__), "../data/episodes.json")
    ) as f:
        episode_data = f.read()

    op.bulk_insert(episodes, json.loads(episode_data))

    op.create_table(
        "paintings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("episode_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=100), nullable=False),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["episode_id"],
            ["seasons.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    paintingtype = postgresql.ENUM(
        "landscape", "portrait", name="paintingtype"
    )
    paintingtype.create(op.get_bind())
    op.add_column(
        "paintings",
        sa.Column(
            "type",
            sa.Enum("landscape", "portrait", name="paintingtype"),
            nullable=True,
        ),
    )

    op.create_table(
        "episodes_animals",
        sa.Column("episode_id", sa.Integer(), nullable=False),
        sa.Column("animal_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["animal_id"],
            ["animals.id"],
        ),
        sa.ForeignKeyConstraint(
            ["episode_id"],
            ["episodes.id"],
        ),
        sa.PrimaryKeyConstraint("episode_id", "animal_id"),
    )
    op.create_table(
        "episodes_guests",
        sa.Column("episode_id", sa.Integer(), nullable=False),
        sa.Column("guest_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["episode_id"],
            ["episodes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["guest_id"],
            ["guests.id"],
        ),
        sa.PrimaryKeyConstraint("episode_id", "guest_id"),
    )
    op.create_table(
        "episodes_quotes",
        sa.Column("episode_id", sa.Integer(), nullable=False),
        sa.Column("quote_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["episode_id"],
            ["episodes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["quote_id"],
            ["quotes.id"],
        ),
        sa.PrimaryKeyConstraint("episode_id", "quote_id"),
    )
    op.create_table(
        "paintings_colors",
        sa.Column("painting_id", sa.Integer(), nullable=False),
        sa.Column("paint_color_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["paint_color_id"],
            ["paint_colors.id"],
        ),
        sa.ForeignKeyConstraint(
            ["painting_id"],
            ["paintings.id"],
        ),
        sa.PrimaryKeyConstraint("painting_id", "paint_color_id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("paintings_colors")
    op.drop_table("episodes_quotes")
    op.drop_table("episodes_guests")
    op.drop_table("episodes_animals")
    op.drop_table("paintings")
    op.drop_table("episodes")
    op.drop_table("seasons")
    op.drop_table("quotes")
    op.drop_table("paint_colors")
    op.drop_table("guests")
    op.drop_table("animals")
    # ### end Alembic commands ###
